import java.math.*;
import java.util.*;
public class RSA {
public static int getGCD(int mod, int num) {
if (mod == 0)
return num;
else
return getGCD(num % mod, mod);
}
public static void main(String args[]) {
int d = 0, e; // Intialization
int message = 32; // number message
int prime1 = 5; // 1st prime number p
int prime2 = 7; // 2nd prime number q
int primeMul = prime1 * prime2; // performing operations
int primeMul1 = (prime1 - 1) * (prime2 - 1);
System.out.println("primeMul1 is equal to : " + primeMul1 + "\n");
for (e = 2; e < primeMul1; e++) {
if (getGCD(e, primeMul1) == 1) {
break;
}
}
System.out.println("Public key e is = " + e);
for (int m = 0; m <= 9; m++) {
int temp = 1 + (m * primeMul1);
if (temp % e == 0) {
d = temp / e;
break;
}
}
System.out.println("d is : " + d);
double cipher;
BigInteger d_message;
cipher = (Math.pow(message, e)) % primeMul;
System.out.println("Cipher text is : " + cipher);
BigInteger bigN = BigInteger.valueOf(primeMul);
BigInteger bigC = BigDecimal.valueOf(cipher).toBigInteger();
d_message = (bigC.pow(d)).mod(bigN);
System.out.println("Decrypted text is : " + d_message);
}
}
